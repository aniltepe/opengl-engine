#version 330 core
layout(location = 0) in vec3 vPos;
layout(location = 1) in vec3 vNormal;
layout(location = 2) in vec2 vTexCoord;
layout(location = 3) in float vTexOrder;
layout(location = 4) in float vTexQty;
out vec3 FragPos;
out vec3 Normal;
out vec2 TexCoord;
out float TexOrder;
out float TexQty;
uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;
void main() {
	gl_Position = projection * view * model * vec4(vPos, 1.0f);
	FragPos = vec3(model * vec4(vPos, 1.0f));
	Normal = vNormal;
	TexCoord = vTexCoord;
	TexOrder = vTexOrder;
	TexQty = vTexQty;
}





#version 330 core
out vec4 FragColor;
in vec3 FragPos;
in vec3 Normal;
in vec2 TexCoord;
in float TexOrder;
in float TexQty;
struct Material {
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	float shininess;
};
struct Light {
	int lightType;
	vec3 direction;
	vec3 position;
	float constant;
	float linear;
	float quadratic;
	float cutOff;
	float outerCutOff;
	Material material;
};
uniform sampler2D textures[2];
uniform vec3 cameraPos;
uniform Material modelMaterial;
uniform Light lights[4];
vec4 CalculateLight(Light light, vec3 normal, vec3 viewDir, vec3 fragPos);
void main() {
	vec3 norm = normalize(Normal);
	vec3 viewDir = normalize(cameraPos - FragPos);
	vec4 result = vec4(0.0f);
	for(int i = 0; i < lights.length(); i++)
		result += CalculateLight(lights[i], norm, viewDir, FragPos);
	FragColor = result;
}
vec4 CalculateLight(Light light, vec3 normal, vec3 viewDir, vec3 fragPos) {
	vec3 lightDir = normalize(light.position - fragPos);
	if (light.lightType == 1)
		lightDir = normalize(-light.direction);
	float diffStrength = max(dot(normal, lightDir), 0.0);
	vec3 reflectDir = reflect(-lightDir, normal);
	float specStrength = pow(max(dot(viewDir, reflectDir), 0.0), modelMaterial.shininess);
	int complexOrder = int(TexOrder);
	int quantity = int(TexQty);
	vec4 ambient = vec4(0.0f);
	vec4 diffuse = vec4(0.0f);
	vec4 specular = vec4(0.0f);
	for(int i = 0; i < quantity; i++) {
		int remainder = complexOrder;
		int division;
		for(int j = quantity; j > i; j--) {
			division = int(remainder / pow(2, 4 * (j - 1)));
			remainder = remainder - int(division * pow(2, 4 * (j - 1)));
		}
		int order = division;
		ambient += vec4(light.material.ambient, 1.0f) * texture(textures[order], TexCoord) * vec4(modelMaterial.diffuse, 1.0f);
		diffuse += vec4(light.material.diffuse, 1.0f) * diffStrength * texture(textures[order], TexCoord) * vec4(modelMaterial.diffuse, 1.0f);
	}
	if (light.lightType != 1) {
		float distance = length(light.position - fragPos);
		float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));
		ambient *= attenuation;
		diffuse *= attenuation;
		specular *= attenuation;
		if (light.lightType == 2) {
			float theta = dot(lightDir, normalize(-light.direction));
			float epsilon = light.cutOff - light.outerCutOff;
			float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);
			ambient *= intensity;
			diffuse *= intensity;
			specular *= intensity;
		}
	}
	return (ambient + diffuse + specular);
}
